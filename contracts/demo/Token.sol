// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "../utils/ERC721.sol";


contract Token is ERC721 {

    string public constant token_version = "0.1.0-beta";
    address public immutable controller;

    struct TokenData {
        bytes   ipfsHash;            // this needs to be encoded and the hash the digest needs to be stored off-chain securely
        bytes32 certificate_id;      // generated by the country authority
        bytes32 beneficiary_id;      // generated by the country authority
        uint16  country_id;          // helps IPVC to identify country
        bytes32 ipvc_beneficiary_id; // unique beneficiary ID for IPVC
        bytes32 ipvc_vaccinator_id;  // unique vaccinator ID for IPVC
    }
    // ipvc_certificate_id => TokenData
    mapping( bytes32 => TokenData ) public vaccineTokens;
    // vaccinator address => ipvc_vaccinator_id
    mapping(address => bytes32) public vaccinators;

    modifier onlyController {
        require(
            msg.sender == controller,
            "Token: Only controller can access this function"
        );
        _;
    }

    /**
     * @dev constructor
     */
    constructor (address _controller) ERC721("VaccineToken","VT") {
        require(
            _controller != address(0),
            "Token: Controller address cannot be zero address"
        );
        controller = _controller;
    }
}