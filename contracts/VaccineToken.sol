// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "./utils/ERC721.sol";

contract VaccineToken is ERC721 {

    string constant version = "0.1.0";

    // what is the entity
    // - TokenData. This is a NFT data struct which proves that the they have been vaccinated.
    // how it can be accessed
    // - it can be accessed using certificated ID
    // - it can be accessed using linked ID which is hashed
    // how can it interact
    // - it is not an actor so no direct interaction.
    // - this is a NFT so it will just help prove ownership
    // what should we know about this entity
    // - who is this linked to in real life (the beneficiary)
    // - who controls this certificate (vaccinator on request made by beneficiary)
    // - which country it was generated in
    // - what kind of dose was it
    // - timestamp of the dose
    // - this can only be created by vaccinator
    struct TokenData{
        bytes   ipfsHash;            // this needs to be encoded and the hash the digest needs to be stored off-chain securely
        bytes32 certificate_id;      // generated by the country authority
        bytes32 beneficiary_id;      // generated by the country authority
        uint16  country_id;          // helps IPVC to identify country
        bytes32 ipvc_beneficiary_id; // unique beneficiary ID for IPVC
        bytes32 ipvc_vaccinator_id;  // unique vaccinator ID for IPVC
    }
    // ipvc_certificate_id => TokenData
    mapping( bytes32 => TokenData ) public vaccineTokens;
    // vaccinator address => ipvc_vaccinator_id
    mapping(address => bytes32) public vaccinators;

    /**
     * @dev constructor
     */
    constructor () ERC721("VaccineToken","VT") {

    }

}